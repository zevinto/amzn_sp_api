# #Selling Partner APIs for Fulfillment Outbound
#
# The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
#
# OpenAPI spec version: 2020-07-01
#
# Generated by: https://github.com/swagger-api/swagger-codegen.git
# Swagger Codegen version: 3.0.36

require 'date'

module AmznSpApi::FulfillmentOutboundApiModel
  # General information about a fulfillment order, including its status.
  class FulfillmentOrder
    # The fulfillment order identifier submitted with the createFulfillmentOrder operation.
    attr_accessor :seller_fulfillment_order_id

    # The identifier for the marketplace the fulfillment order is placed against.
    attr_accessor :marketplace_id

    # A fulfillment order identifier submitted with the createFulfillmentOrder operation. Displays as the order identifier in recipient-facing materials such as the packing slip.
    attr_accessor :displayable_order_id

    attr_accessor :displayable_order_date, :shipping_speed_category, :delivery_window, :destination_address, :fulfillment_action, :fulfillment_policy, :cod_settings, :received_date, :fulfillment_order_status, :status_updated_date, :notification_emails

    # A text block submitted with the createFulfillmentOrder operation. Displays in recipient-facing materials such as the packing slip.
    attr_accessor :displayable_order_comment

    # A list of features and their fulfillment policies to apply to the order.
    attr_accessor :feature_constraints

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        'seller_fulfillment_order_id': :sellerFulfillmentOrderId,
        'marketplace_id': :marketplaceId,
        'displayable_order_id': :displayableOrderId,
        'displayable_order_date': :displayableOrderDate,
        'displayable_order_comment': :displayableOrderComment,
        'shipping_speed_category': :shippingSpeedCategory,
        'delivery_window': :deliveryWindow,
        'destination_address': :destinationAddress,
        'fulfillment_action': :fulfillmentAction,
        'fulfillment_policy': :fulfillmentPolicy,
        'cod_settings': :codSettings,
        'received_date': :receivedDate,
        'fulfillment_order_status': :fulfillmentOrderStatus,
        'status_updated_date': :statusUpdatedDate,
        'notification_emails': :notificationEmails,
        'feature_constraints': :featureConstraints
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        'seller_fulfillment_order_id': :Object,
        'marketplace_id': :Object,
        'displayable_order_id': :Object,
        'displayable_order_date': :Object,
        'displayable_order_comment': :Object,
        'shipping_speed_category': :Object,
        'delivery_window': :Object,
        'destination_address': :Object,
        'fulfillment_action': :Object,
        'fulfillment_policy': :Object,
        'cod_settings': :Object,
        'received_date': :Object,
        'fulfillment_order_status': :Object,
        'status_updated_date': :Object,
        'notification_emails': :Object,
        'feature_constraints': :Object
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `AmznSpApi::FulfillmentOutboundApiModel::FulfillmentOrder` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `AmznSpApi::FulfillmentOutboundApiModel::FulfillmentOrder`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect unless self.class.attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.seller_fulfillment_order_id = attributes[:seller_fulfillment_order_id] if attributes.key?(:seller_fulfillment_order_id)

      self.marketplace_id = attributes[:marketplace_id] if attributes.key?(:marketplace_id)

      self.displayable_order_id = attributes[:displayable_order_id] if attributes.key?(:displayable_order_id)

      self.displayable_order_date = attributes[:displayable_order_date] if attributes.key?(:displayable_order_date)

      self.displayable_order_comment = attributes[:displayable_order_comment] if attributes.key?(:displayable_order_comment)

      self.shipping_speed_category = attributes[:shipping_speed_category] if attributes.key?(:shipping_speed_category)

      self.delivery_window = attributes[:delivery_window] if attributes.key?(:delivery_window)

      self.destination_address = attributes[:destination_address] if attributes.key?(:destination_address)

      self.fulfillment_action = attributes[:fulfillment_action] if attributes.key?(:fulfillment_action)

      self.fulfillment_policy = attributes[:fulfillment_policy] if attributes.key?(:fulfillment_policy)

      self.cod_settings = attributes[:cod_settings] if attributes.key?(:cod_settings)

      self.received_date = attributes[:received_date] if attributes.key?(:received_date)

      self.fulfillment_order_status = attributes[:fulfillment_order_status] if attributes.key?(:fulfillment_order_status)

      self.status_updated_date = attributes[:status_updated_date] if attributes.key?(:status_updated_date)

      self.notification_emails = attributes[:notification_emails] if attributes.key?(:notification_emails)

      return unless attributes.key?(:feature_constraints)
      return unless (value = attributes[:feature_constraints]).is_a?(Array)

      self.feature_constraints = value
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = []
      invalid_properties.push('invalid value for "seller_fulfillment_order_id", seller_fulfillment_order_id cannot be nil.') if @seller_fulfillment_order_id.nil?

      invalid_properties.push('invalid value for "marketplace_id", marketplace_id cannot be nil.') if @marketplace_id.nil?

      invalid_properties.push('invalid value for "displayable_order_id", displayable_order_id cannot be nil.') if @displayable_order_id.nil?

      invalid_properties.push('invalid value for "displayable_order_date", displayable_order_date cannot be nil.') if @displayable_order_date.nil?

      invalid_properties.push('invalid value for "displayable_order_comment", displayable_order_comment cannot be nil.') if @displayable_order_comment.nil?

      invalid_properties.push('invalid value for "shipping_speed_category", shipping_speed_category cannot be nil.') if @shipping_speed_category.nil?

      invalid_properties.push('invalid value for "destination_address", destination_address cannot be nil.') if @destination_address.nil?

      invalid_properties.push('invalid value for "received_date", received_date cannot be nil.') if @received_date.nil?

      invalid_properties.push('invalid value for "fulfillment_order_status", fulfillment_order_status cannot be nil.') if @fulfillment_order_status.nil?

      invalid_properties.push('invalid value for "status_updated_date", status_updated_date cannot be nil.') if @status_updated_date.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @seller_fulfillment_order_id.nil?
      return false if @marketplace_id.nil?
      return false if @displayable_order_id.nil?
      return false if @displayable_order_date.nil?
      return false if @displayable_order_comment.nil?
      return false if @shipping_speed_category.nil?
      return false if @destination_address.nil?
      return false if @received_date.nil?
      return false if @fulfillment_order_status.nil?
      return false if @status_updated_date.nil?

      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        seller_fulfillment_order_id == other.seller_fulfillment_order_id &&
        marketplace_id == other.marketplace_id &&
        displayable_order_id == other.displayable_order_id &&
        displayable_order_date == other.displayable_order_date &&
        displayable_order_comment == other.displayable_order_comment &&
        shipping_speed_category == other.shipping_speed_category &&
        delivery_window == other.delivery_window &&
        destination_address == other.destination_address &&
        fulfillment_action == other.fulfillment_action &&
        fulfillment_policy == other.fulfillment_policy &&
        cod_settings == other.cod_settings &&
        received_date == other.received_date &&
        fulfillment_order_status == other.fulfillment_order_status &&
        status_updated_date == other.status_updated_date &&
        notification_emails == other.notification_emails &&
        feature_constraints == other.feature_constraints
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [seller_fulfillment_order_id, marketplace_id, displayable_order_id, displayable_order_date, displayable_order_comment, shipping_speed_category, delivery_window, destination_address, fulfillment_action, fulfillment_policy, cod_settings, received_date, fulfillment_order_status, status_updated_date, notification_emails, feature_constraints].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) }) if attributes[self.class.attribute_map[key]].is_a?(Array)
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        AmznSpApi::FulfillmentOutboundApiModel.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end end
end
