# #Selling Partner APIs for Fulfillment Outbound
#
# The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
#
# OpenAPI spec version: 2020-07-01
#
# Generated by: https://github.com/swagger-api/swagger-codegen.git
# Swagger Codegen version: 3.0.36

require 'date'

module AmznSpApi::FulfillmentOutboundApiModel
  # Delivery and item information for a shipment in a fulfillment order preview.
  class FulfillmentPreviewShipment
    attr_accessor :earliest_ship_date, :latest_ship_date, :earliest_arrival_date, :latest_arrival_date, :fulfillment_preview_items

    # Provides additional insight into the shipment timeline when exact delivery dates are not able to be precomputed.
    attr_accessor :shipping_notes

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        'earliest_ship_date': :earliestShipDate,
        'latest_ship_date': :latestShipDate,
        'earliest_arrival_date': :earliestArrivalDate,
        'latest_arrival_date': :latestArrivalDate,
        'shipping_notes': :shippingNotes,
        'fulfillment_preview_items': :fulfillmentPreviewItems
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        'earliest_ship_date': :Object,
        'latest_ship_date': :Object,
        'earliest_arrival_date': :Object,
        'latest_arrival_date': :Object,
        'shipping_notes': :Object,
        'fulfillment_preview_items': :Object
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `AmznSpApi::FulfillmentOutboundApiModel::FulfillmentPreviewShipment` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `AmznSpApi::FulfillmentOutboundApiModel::FulfillmentPreviewShipment`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect unless self.class.attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.earliest_ship_date = attributes[:earliest_ship_date] if attributes.key?(:earliest_ship_date)

      self.latest_ship_date = attributes[:latest_ship_date] if attributes.key?(:latest_ship_date)

      self.earliest_arrival_date = attributes[:earliest_arrival_date] if attributes.key?(:earliest_arrival_date)

      self.latest_arrival_date = attributes[:latest_arrival_date] if attributes.key?(:latest_arrival_date)

      if attributes.key?(:shipping_notes) && (value = attributes[:shipping_notes]).is_a?(Array)
        self.shipping_notes = value
      end

      return unless attributes.key?(:fulfillment_preview_items)

      self.fulfillment_preview_items = attributes[:fulfillment_preview_items]
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = []
      invalid_properties.push('invalid value for "fulfillment_preview_items", fulfillment_preview_items cannot be nil.') if @fulfillment_preview_items.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @fulfillment_preview_items.nil?

      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        earliest_ship_date == other.earliest_ship_date &&
        latest_ship_date == other.latest_ship_date &&
        earliest_arrival_date == other.earliest_arrival_date &&
        latest_arrival_date == other.latest_arrival_date &&
        shipping_notes == other.shipping_notes &&
        fulfillment_preview_items == other.fulfillment_preview_items
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [earliest_ship_date, latest_ship_date, earliest_arrival_date, latest_arrival_date, shipping_notes, fulfillment_preview_items].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) }) if attributes[self.class.attribute_map[key]].is_a?(Array)
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        AmznSpApi::FulfillmentOutboundApiModel.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end end
end
