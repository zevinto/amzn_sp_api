# #Selling Partner API for Orders
#
# The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools.
#
# OpenAPI spec version: v0
#
# Generated by: https://github.com/swagger-api/swagger-codegen.git
# Swagger Codegen version: 3.0.36

require 'date'

module AmznSpApi::OrdersApiModel
  # The verification status of the order along with associated approval or rejection metadata.
  class RegulatedOrderVerificationStatus
    attr_accessor :status, :rejection_reason

    # When true, the regulated information provided in the order requires a review by the merchant.
    attr_accessor :requires_merchant_action

    # A list of valid rejection reasons that may be used to reject the order's regulated information.
    attr_accessor :valid_rejection_reasons

    # The date the order was reviewed. In ISO 8601 date time format.
    attr_accessor :review_date

    # The identifier for the order's regulated information reviewer.
    attr_accessor :external_reviewer_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        'status': :Status,
        'requires_merchant_action': :RequiresMerchantAction,
        'valid_rejection_reasons': :ValidRejectionReasons,
        'rejection_reason': :RejectionReason,
        'review_date': :ReviewDate,
        'external_reviewer_id': :ExternalReviewerId
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        'status': :Object,
        'requires_merchant_action': :Object,
        'valid_rejection_reasons': :Object,
        'rejection_reason': :Object,
        'review_date': :Object,
        'external_reviewer_id': :Object
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `AmznSpApi::OrdersApiModel::RegulatedOrderVerificationStatus` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `AmznSpApi::OrdersApiModel::RegulatedOrderVerificationStatus`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect unless self.class.attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.status = attributes[:status] if attributes.key?(:status)

      self.requires_merchant_action = attributes[:requires_merchant_action] if attributes.key?(:requires_merchant_action)

      if attributes.key?(:valid_rejection_reasons) && (value = attributes[:valid_rejection_reasons]).is_a?(Array)
        self.valid_rejection_reasons = value
      end

      self.rejection_reason = attributes[:rejection_reason] if attributes.key?(:rejection_reason)

      self.review_date = attributes[:review_date] if attributes.key?(:review_date)

      return unless attributes.key?(:external_reviewer_id)

      self.external_reviewer_id = attributes[:external_reviewer_id]
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = []
      invalid_properties.push('invalid value for "status", status cannot be nil.') if @status.nil?

      invalid_properties.push('invalid value for "requires_merchant_action", requires_merchant_action cannot be nil.') if @requires_merchant_action.nil?

      invalid_properties.push('invalid value for "valid_rejection_reasons", valid_rejection_reasons cannot be nil.') if @valid_rejection_reasons.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @status.nil?
      return false if @requires_merchant_action.nil?
      return false if @valid_rejection_reasons.nil?

      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        status == other.status &&
        requires_merchant_action == other.requires_merchant_action &&
        valid_rejection_reasons == other.valid_rejection_reasons &&
        rejection_reason == other.rejection_reason &&
        review_date == other.review_date &&
        external_reviewer_id == other.external_reviewer_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [status, requires_merchant_action, valid_rejection_reasons, rejection_reason, review_date, external_reviewer_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) }) if attributes[self.class.attribute_map[key]].is_a?(Array)
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        AmznSpApi::OrdersApiModel.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end end
end
