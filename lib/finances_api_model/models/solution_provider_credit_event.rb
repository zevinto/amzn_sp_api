# #Selling Partner API for Finances
#
# The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
#
# OpenAPI spec version: v0
#
# Generated by: https://github.com/swagger-api/swagger-codegen.git
# Swagger Codegen version: 3.0.36

require 'date'

module AmznSpApi::FinancesApiModel
  # A credit given to a solution provider.
  class SolutionProviderCreditEvent
    # The transaction type.
    attr_accessor :provider_transaction_type

    # A seller-defined identifier for an order.
    attr_accessor :seller_order_id

    # The identifier of the marketplace where the order was placed.
    attr_accessor :marketplace_id

    # The two-letter country code of the country associated with the marketplace where the order was placed.
    attr_accessor :marketplace_country_code

    # The Amazon-defined identifier of the seller.
    attr_accessor :seller_id

    # The store name where the payment event occurred.
    attr_accessor :seller_store_name

    # The Amazon-defined identifier of the solution provider.
    attr_accessor :provider_id

    # The store name where the payment event occurred.
    attr_accessor :provider_store_name

    attr_accessor :transaction_amount, :transaction_creation_date

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        'provider_transaction_type': :ProviderTransactionType,
        'seller_order_id': :SellerOrderId,
        'marketplace_id': :MarketplaceId,
        'marketplace_country_code': :MarketplaceCountryCode,
        'seller_id': :SellerId,
        'seller_store_name': :SellerStoreName,
        'provider_id': :ProviderId,
        'provider_store_name': :ProviderStoreName,
        'transaction_amount': :TransactionAmount,
        'transaction_creation_date': :TransactionCreationDate
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        'provider_transaction_type': :Object,
        'seller_order_id': :Object,
        'marketplace_id': :Object,
        'marketplace_country_code': :Object,
        'seller_id': :Object,
        'seller_store_name': :Object,
        'provider_id': :Object,
        'provider_store_name': :Object,
        'transaction_amount': :Object,
        'transaction_creation_date': :Object
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `AmznSpApi::FinancesApiModel::SolutionProviderCreditEvent` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `AmznSpApi::FinancesApiModel::SolutionProviderCreditEvent`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect unless self.class.attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.provider_transaction_type = attributes[:provider_transaction_type] if attributes.key?(:provider_transaction_type)

      self.seller_order_id = attributes[:seller_order_id] if attributes.key?(:seller_order_id)

      self.marketplace_id = attributes[:marketplace_id] if attributes.key?(:marketplace_id)

      self.marketplace_country_code = attributes[:marketplace_country_code] if attributes.key?(:marketplace_country_code)

      self.seller_id = attributes[:seller_id] if attributes.key?(:seller_id)

      self.seller_store_name = attributes[:seller_store_name] if attributes.key?(:seller_store_name)

      self.provider_id = attributes[:provider_id] if attributes.key?(:provider_id)

      self.provider_store_name = attributes[:provider_store_name] if attributes.key?(:provider_store_name)

      self.transaction_amount = attributes[:transaction_amount] if attributes.key?(:transaction_amount)

      return unless attributes.key?(:transaction_creation_date)

      self.transaction_creation_date = attributes[:transaction_creation_date]
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        provider_transaction_type == other.provider_transaction_type &&
        seller_order_id == other.seller_order_id &&
        marketplace_id == other.marketplace_id &&
        marketplace_country_code == other.marketplace_country_code &&
        seller_id == other.seller_id &&
        seller_store_name == other.seller_store_name &&
        provider_id == other.provider_id &&
        provider_store_name == other.provider_store_name &&
        transaction_amount == other.transaction_amount &&
        transaction_creation_date == other.transaction_creation_date
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [provider_transaction_type, seller_order_id, marketplace_id, marketplace_country_code, seller_id, seller_store_name, provider_id, provider_store_name, transaction_amount, transaction_creation_date].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) }) if attributes[self.class.attribute_map[key]].is_a?(Array)
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        AmznSpApi::FinancesApiModel.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end end
end
